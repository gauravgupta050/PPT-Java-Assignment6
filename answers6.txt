Que1.What is Collection in Java?

Ans:-Java Collections are the one-stop solutions for all the data manipulation jobs such as storing data, searching, sorting, insertion, deletion, and updating of data. Java collection responds as a single object, and a Java Collection Framework provides various Interfaces and Classes.

Que2. Differentiate between Collection and collections in the context of Java.

Ans:- Collection is the interface group objects into a single unit. Collections is a utility class that has some set of operations perform on Collection. Collection does not have all static methods in it, but Collections consist of methods that are all static.

Que3. What are the advantages of the Collection framework?

Ans:- Advantages of the Collection framework:-
1.Need not to learn multiple ad hoc collection APIs.
2.It provides a standard interface for collections that fosters software reuse and also provides algorithms to manipulate them.
3.Reduces the effort required to design and implement APIs by eliminating the need to produce ad hoc collections APIs.
4.It provides useful data structures and algorithms that reduces programming effort due to which need not to write them ourselves.
5.It provides high-performance implementations of useful data structures and algorithms that increases the performance.
6.Helps in establishing a common language to pass collections back and forth that provides interoperability between unrelated APIs.
7.Collection is resizable and can grow.

Que4.Explain the various interfaces used in the Collection framework.

Ans:-The Core collection interfaces in Java. The Java Collection framework offers a comprehensive set of interfaces and class implementations that facilitate efficient and meaningful data manipulation. At the apex of the collection hierarchy is the Collection Interface, which serves as a fundamental contract for implementing collection-related operations.
While Java does not provide a direct implementation of the Collection framework, the Collection Interface itself is implemented by two important classes: List and Set.

The core collection interfaces within the Java Collection framework are as follows:

List: The List interface extends the Collection interface and represents an ordered collection of elements. Lists allow duplicate elements and maintain the insertion order. Common implementations of List include ArrayList, LinkedList, and Vector.

Set: The Set interface, also an extension of the Collection interface, represents a collection that does not allow duplicate elements. Sets typically do not maintain a specific order of elements. Notable implementations of Set are HashSet, TreeSet, and LinkedHashSet.

Queue: The Queue interface defines a collection that represents a waiting area, where elements are inserted at one end and removed from the other. Queues follow the First-In-First-Out (FIFO) principle. Notable implementations of Queue include LinkedList and PriorityQueue.

Deque: The Deque interface extends the Queue interface and represents a double-ended queue, allowing elements to be inserted and removed from both ends. Deques support operations at both ends, enabling flexibility in data handling. Common implementations of Deque include ArrayDeque and LinkedList.

Map: The Map interface represents a mapping between unique keys and corresponding values. It does not extend the Collection interface but is an important part of the Java Collection framework. Maps do not allow duplicate keys and are commonly used for key-value pair associations. Notable implementations of Map include HashMap, TreeMap, and LinkedHashMap.


Que5.Differentiate between List and Set in Java.

Ans:-                List                                                                                 Set
1. The List is an indexed sequence.	                                                  1. The Set is an non-indexed sequence.
2. List allows duplicate elements	                                                  2. Set doesnâ€™t allow duplicate elements.
3. Elements by their position can be accessed.                                         	  3. Position access to elements is not allowed.
4. Multiple null elements can be stored.	                                          4. Null element can store only once.
5. List implementations are ArrayList, LinkedList, Vector, Stack                          5. Set implementations are HashSet, LinkedHashSet.

Que6.What is the Differentiate between Iterator and ListIterator in Java.

Ans:-Iterator	                                                                                       ListIterator
1.Can traverse elements present in Collection only in the forward direction. 1.Can traverse elements present in Collection both in forward and backward directions.
2.Helps to traverse Map, List and Set.	                                     2.Can only traverse List and not the other two.
3.Indexes cannot be obtained by using Iterator.	                             3.It has methods like nextIndex() and previousIndex() to obtain indexes of elements at any time while                                                                   traversing List.
4.Cannot modify or replace elements present in Collection.	             4.We can modify or replace elements with the help of set(E e)
5.Cannot add elements and it throws ConcurrentModificationException.	     5.Can easily add elements to a collection at any time.
6.Certain methods of Iterator are next(), remove() and hasNext().	     6.Certain methods of ListIterator are next(), previous(), hasNext(), hasPrevious(), add(E e).

Q7.What is the Differentiate between Comparable and Comparator


Ans:-

Comparable
1.Comparable provides a single sorting sequence. In other words, we can sort the collection on the basis of a single element such as id, name, and price.
2.Comparable affects the original class, i.e., the actual class is modified.
3.Comparable provides compareTo() method to sort elements.
4.Comparable is present in java.lang package.
5.sort the list elements of Comparable type by Collections.sort(List) method.
Comparable	                                                                             Comparator
1. The Comparator provides multiple sorting sequences. In other words, we can sort the collection on the basis of multiple elements such as id, name, and price etc.
2. Comparator doesn't affect the original class, i.e., the actual class is not modified.
3. Comparator provides compare() method to sort elements.
4. A Comparator is present in the java.util package.
5. sort the list elements of Comparator type by Collections.sort(List, Comparator) method.


Que8.What is collision in HashMap?

Ans:-Collisions in the HashMap. A collision, or more specifically, a hash code collision in a HashMap, is a situation where two or more key objects produce the same final hash value and hence point to the same bucket location or array index.

Que9.Distinguish between a hashmap and a Treemap.

Ans:-
                                   HashMap	                                                          TreeMap
Java HashMap is a hashtable based implementation of Map interface.	          Java TreeMap is a Tree structure-based implementation of Map interface.
HashMap implements Map, Cloneable, and Serializable interface.	                  TreeMap implements NavigableMap, Cloneable, and Serializable interface.
HashMap allows a single null key and multiple null values.	                  TreeMap does not allow null keys but can have multiple null values.
HashMap allows heterogeneous elements because it does not perform sorting on keys. TreeMap allows homogeneous values as a key because of sorting.
HashMap is faster than TreeMap.                                                	  TreeMap is slow in comparison to HashMap.
The HashMap class uses the hash table.	                                           TreeMap internally uses a Red-Black tree, which is a self-balancing Binary Search Tree.

Q10.Define LinkedHashMap in Java

Ans:-A LinkedHashMap contains values based on the key. It implements the Map interface and extends the HashMap class. It contains only unique elements. It may have one null key and multiple null values
